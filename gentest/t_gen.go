// Code generated by exo. DO NOT EDIT.
package gentest

import (
	exo "github.com/exo-framework/exo"
	db "github.com/exo-framework/exo/db"
	v2 "github.com/gofiber/fiber/v2"
	uuid "github.com/google/uuid"
	gorm "gorm.io/gorm"
	"strconv"
)

func exog_getTest(c *v2.Ctx) error {
	q_Authorization := c.Get("Authorization")
	q_Validator := c.Get("Validator")
	if q_Validator_validator_errmsg := onValidator(q_Validator); q_Validator_validator_errmsg != "" {
		return c.Status(400).SendString(q_Validator_validator_errmsg)
	}
	raw_Id := c.Params("id")
	q_Id, q_Id_err := strconv.Atoi(raw_Id)
	if q_Id_err != nil {
		return c.Status(400).SendString(q_Id_err.Error())
	}
	raw_Id2 := c.Params("id2")
	q_Id2, q_Id2_err := uuid.Parse(raw_Id2)
	if q_Id2_err != nil {
		return c.Status(400).SendString(q_Id2_err.Error())
	}
	raw_SomeDbModel := c.Params("id")
	q_SomeDbModel := SomeDbModel{}
	q_SomeDbModel_err := db.DB.Where("id=?", raw_SomeDbModel).First(&q_SomeDbModel).Error
	if q_SomeDbModel_err == gorm.ErrRecordNotFound {
		return c.Status(404).SendString("SomeDbModel not found")
	}
	if q_SomeDbModel_err != nil {
		return q_SomeDbModel_err
	}
	q_Name := c.Query("name")
	q_Name2 := c.Query("name2")
	q_Dto := struct {
		Id   int    `json:"id"`
		Name string `json:"name"`
	}{}
	if q_Dto_err := c.BodyParser(&q_Dto); q_Dto_err != nil {
		return c.Status(400).SendString(q_Dto_err.Error())
	}
	q_Form := c.FormValue("form")
	q_FormNamed := c.FormValue("form_named")
	req := GetTest{
		Authorization: q_Authorization,
		Dto:           q_Dto,
		Form:          q_Form,
		FormNamed:     q_FormNamed,
		Get:           exo.Get{Ctx: c},
		Id:            q_Id,
		Id2:           q_Id2,
		Name:          q_Name,
		Name2:         q_Name2,
		SomeDbModel:   q_SomeDbModel,
		Validator:     q_Validator,
	}
	r_0, r_1 := getTest(req)
	if r_1 != nil {
		return r_1
	}
	return c.SendString(r_0)
}
